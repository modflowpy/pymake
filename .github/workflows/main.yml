name: pymake continuous integration

on:
  schedule:
    - cron: '0 3 * * 3' # run at 3 AM UTC every Wednesday
  push:
    branches: [ master ]
  pull_request:

jobs:

  pymake_lint:
    name: pymake linting
    runs-on: ubuntu-latest

    if: github.repository_owner == 'modflowpy'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Install packages
        run: |
          pip install requests pydotplus appdirs numpy matplotlib
          pip install https://github.com/modflowpy/flopy/zipball/develop
          pip install pylint flake8 black

      - name: Run isort
        run: |
          echo "if isort check fails update isort using"
          echo "  pip install isort --upgrade"
          echo "and run"
          echo "  isort ./flopy"
          echo "and then commit the changes."
          isort --verbose --check --diff ./pymake

      - name: Run black
        run: |
          echo "if black check fails update black using"
          echo "  pip install black --upgrade"
          echo "and run"
          echo "  black ./flopy"
          echo "and then commit the changes."
          black --check --diff ./pymake

      - name: Run flake8
        run: flake8 --count --show-source ./pymake

      - name: Run pylint
        run: pylint --jobs=0 --errors-only ./pymake

  pymake_setup:
    name: standard installation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:

      # check out repo
      - name: Checkout pymake repo
        uses: actions/checkout@v2.3.4

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9

      - name: Upgrade pip and install wheel
        run: |
          python -m pip install --upgrade pip
          pip install wheel

      - name: Base pymake installation
        run: |
          pip --verbose install .

      - name: Print pymake version
        run: |
          python -c "import pymake; print(pymake.__version__)"

  pymakeCI-os-gcc:
    name: pymake CI gcc on different OSs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Setup Graphviz
        if: runner.os == 'Linux'
        uses: ts-graphviz/setup-graphviz@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install python packages
        run: |
          .github/common/install-python.sh

      - name: Setup symbolic link to gfortran on Linux
        if: runner.os == 'Linux'
        run: |
          sudo ln -fs /usr/bin/gfortran-10 /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-10 /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-10 /usr/local/bin/g++

      - name: Setup symbolic link to gfortran on macOS
        if: runner.os == 'macOS'
        run: |
          sudo ln -fs /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          sudo ln -fs /usr/local/bin/gcc-10 /usr/local/bin/gcc
          sudo ln -fs /usr/local/bin/g++-10 /usr/local/bin/g++

      - name: Print GNU compiler versions
        run: |
          gfortran --version
          gcc --version
          g++ --version

      - name: Download examples for pytest runs
        run: |
          .github/common/download-examples.sh

      - name: Run pytest
        run: |
          pytest -v --dist=loadfile -n=auto -m regression --durations=0 --cov=pymake --cov-report=xml autotest/

      - name: Print coverage report before upload
        run: |
          coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.15
        with:
          file: ./coverage.xml

  pymakeCI-os-intel:
    name: pymake CI intel on different OSs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_script: ifortvars_linux.sh
          - os: macos-latest
            os_script: ifortvars_macos.sh
          - os: windows-2019
            os_script: ifortvars_windows.bat
    defaults:
      run:
        shell: bash
    env:
      WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17392/w_HPCKit_p_2021.1.0.2682_offline.exe
      LINUX_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17427/l_HPCKit_p_2021.1.0.2684_offline.sh
      MACOS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/irc_nas/17398/m_HPCKit_p_2021.1.0.2681_offline.dmg
      WINDOWS_FORTRAN_COMPONENTS: intel.oneapi.win.ifort-compiler
      LINUX_FORTRAN_COMPONENTS_WEB: intel.oneapi.lin.ifort-compiler
      MACOS_FORTRAN_COMPONENTS: intel.oneapi.mac.ifort-compiler
      WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
      LINUX_CPP_COMPONENTS_WEB: intel.oneapi.lin.dpcpp-cpp-compiler-pro
      MACOS_CPP_COMPONENTS: intel.oneapi.mac.cpp-compiler
      FC: ifort

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Setup Graphviz
        if: runner.os == 'Linux'
        uses: ts-graphviz/setup-graphviz@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install python packages
        run: |
          .github/common/install-python.sh

      - name: Download examples for pytest runs
        run: |
          .github/common/download-examples.sh

      - name: cache install intel compilers on linux
        if: runner.os == 'Linux'
        id: cache-install-linux
        uses: actions/cache@v2
        with:
          path: |
            /opt/intel/oneapi/compiler
          key: install-${{ env.LINUX_HPCKIT_URL }}-${{ env.LINUX_CPP_COMPONENTS_WEB }}-${{ env.LINUX_FORTRAN_COMPONENTS_WEB }}-compiler-${{ hashFiles('**/.github/intel-scripts/cache_exclude_linux.sh') }}

      - name: install intel compilers on linux
        if: runner.os == 'Linux' && steps.cache-install-linux.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/install_linux.sh $LINUX_HPCKIT_URL $LINUX_CPP_COMPONENTS_WEB:$LINUX_FORTRAN_COMPONENTS_WEB

      - name: cache install intel compilers on macos
        if: runner.os == 'macOS'
        id: cache-install-macos
        uses: actions/cache@v2
        with:
          path: /opt/intel/oneapi
          key: install-${{ env.MACOS_HPCKIT_URL }}--${{ env.MACOS_CPP_COMPONENTS }}-${{ env.MACOS_FORTRAN_COMPONENTS }}

      - name: install intel compilers on macos
        if: runner.os == 'macOS' && steps.cache-install-macos.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/install_macos.sh $MACOS_HPCKIT_URL $MACOS_CPP_COMPONENTS:$MACOS_FORTRAN_COMPONENTS

      - name: cache install ifort on windows
        if: runner.os == 'Windows'
        id: cache-install-windows
        uses: actions/cache@v2
        with:
          path: C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-${{ env.WINDOWS_FORTRAN_COMPONENTS }}-compiler-${{ hashFiles('**/.github/intel-scripts/cache_exclude_windows.sh') }}

      - name: install intel compilers on windows
        if: runner.os == 'Windows' && steps.cache-install-windows.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/install_windows.bat $WINDOWS_HPCKIT_URL $WINDOWS_CPP_COMPONENTS:$WINDOWS_FORTRAN_COMPONENTS

      - name: activate intel and test on linux and macOS
        if: runner.os == 'Linux' || runner.os == 'macOS'
        env:
          CC: icc
        run: |
          .github/intel-scripts/${{ matrix.os_script }}

      - name: activate intel and test on Windows
        if: runner.os == 'Windows'
        env:
          CC: icl
        shell: cmd
        run: |
          call ".github/intel-scripts/ifortvars_windows.bat"
          pytest -v -m=base --durations=0 --cov=pymake --cov-report=xml autotest/

      - name: Print coverage report before upload
        run: |
          coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.15
        with:
          file: ./coverage.xml

      - name: exclude unused files from cache on windows
        if: runner.os == 'Windows' && steps.cache-install-windows.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/cache_exclude_windows.sh

      - name: exclude unused files from cache on linux
        if: runner.os == 'Linux' && steps.cache-install-linux.outputs.cache-hit != 'true'
        run: |
          .github/intel-scripts/cache_exclude_linux.sh

  pymakeCI-gcc-prev:
    name: pymake CI GCC 9 and 8
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        gcc-version: [ 9, 8 ]
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install python packages
        run: |
          .github/common/install-python.sh

      - name: Setup symbolic link to gfortran on Linux
        run: |
          sudo ln -fs /usr/bin/gfortran-${{ matrix.gcc-version }} /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-${{ matrix.gcc-version }} /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-${{ matrix.gcc-version }} /usr/local/bin/g++

      - name: Print GNU compiler versions
        run: |
          gfortran --version
          gcc --version
          g++ --version

      - name: Download examples for pytest runs
        run: |
          .github/common/download-examples.sh

      - name: Run pytest
        run: |
          pytest -v --dist=loadfile -n=auto -m regression --durations=0 --cov=pymake --cov-report=xml autotest/

      - name: Print coverage report before upload
        run: |
          coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.15
        with:
          file: ./coverage.xml

  pymakeCI-requests:
    name: pymake CI requests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install python packages
        run: |
          .github/common/install-python.sh

      - name: Run pytest
        run: |
          pytest -v --dist=loadfile -n=auto -m requests --durations=0 --cov=pymake --cov-report=xml autotest/

      - name: Print coverage report before upload
        run: |
          coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1.0.15
        with:
          file: ./coverage.xml

  pymakeCI-python-prev:
    name: pymake CI with previous python versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.7 ]
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python packages
        run: |
          .github/common/install-python.sh

      - name: Setup symbolic link to gfortran on Linux
        if: runner.os == 'Linux'
        run: |
          sudo ln -fs /usr/bin/gfortran-10 /usr/local/bin/gfortran
          sudo ln -fs /usr/bin/gcc-10 /usr/local/bin/gcc
          sudo ln -fs /usr/bin/g++-10 /usr/local/bin/g++

      - name: Print GNU compiler versions
        run: |
          gfortran --version
          gcc --version
          g++ --version

      - name: Download examples for pytest runs
        run: |
          .github/common/download-examples.sh

      - name: Run pytest
        run: |
          pytest -v --dist=loadfile -n=auto -m base --durations=0

  pymake_rtd:
    name: pymake rtd
    needs: pymakeCI-os-gcc
    runs-on: ubuntu-latest
    if:
      github.event_name == 'push'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.3.4

      - name: Trigger RTDs build
        if: github.ref == 'refs/heads/master'
        uses: dfm/rtds-action@v1.0.2
        with:
          webhook_url: ${{ secrets.RTDS_WEBHOOK_URL }}
          webhook_token: ${{ secrets.RTDS_WEBHOOK_TOKEN }}
          commit_ref: ${{ github.ref }}
